decoder u32 ArmInstruction {
    category [ 0b1111:4; _:28 ] // Unconditional instructions
    {
        mod_blx = [ 0b1111101:7; h_bit:1; signed_imm_24:24 ]
        cps = [0b111100010000:12; imod:2; mmod:1; 0b00000000:8; a_bit:1; i_bit:1; f_bit:1; 0:1; mode:5]
        clrex = [0b111101010111:12; 0b111111110000:12; 0b00011111:8]
        rfe = [0b1111100:7; p_bit:1; u_bit:1; 0b0:1; w_bit:1; 0b1:1; rn:4; 0b0000101000000000:16]
        srs = [0b1111100:7; p_bit:1; u_bit:1; 0b1:1; w_bit:1; 0b0110100000101000:16; mode:5]
        undef = [ _:32 ]
    }

    category [ _:4; 0b000:3; _:20; 0b0:1; _:4 ] // Data processing immediate shift
      or [ _:4; 0b000:3; _:17; 0b0:1; _:2; 0b1:1; _:4 ] // Data processing register shift
      or [ _:4; 0b001:3; _:25 ] // Data processing immediate
    {
        and = [ cond:4; 0b00:2; i_bit:1; 0b0000:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        eor = [ cond:4; 0b00:2; i_bit:1; 0b0001:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        sub = [ cond:4; 0b00:2; i_bit:1; 0b0010:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        rsb = [ cond:4; 0b00:2; i_bit:1; 0b0011:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        add = [ cond:4; 0b00:2; i_bit:1; 0b0100:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        adc = [ cond:4; 0b00:2; i_bit:1; 0b0101:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        sbc = [ cond:4; 0b00:2; i_bit:1; 0b0110:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        rsc = [ cond:4; 0b00:2; i_bit:1; 0b0111:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        tst = [ cond:4; 0b00:2; i_bit:1; 0b1000:4; 0b1:1; rn:4; 0b0000:4; shifter_operand:12 ]
        teq = [ cond:4; 0b00:2; i_bit:1; 0b1001:4; 0b1:1; rn:4; 0b0000:4; shifter_operand:12 ]
        cmp = [ cond:4; 0b00:2; i_bit:1; 0b1010:4; 0b1:1; rn:4; 0b0000:4; shifter_operand:12 ]
        cmn = [ cond:4; 0b00:2; i_bit:1; 0b1011:4; 0b1:1; rn:4; 0b0000:4; shifter_operand:12 ]
        orr = [ cond:4; 0b00:2; i_bit:1; 0b1100:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        mov = [ cond:4; 0b00:2; i_bit:1; 0b1101:4; s_bit:1; 0b0000:4; rd:4; shifter_operand:12 ]
        bic = [ cond:4; 0b00:2; i_bit:1; 0b1110:4; s_bit:1; rn:4; rd:4; shifter_operand:12 ]
        mvn = [ cond:4; 0b00:2; i_bit:1; 0b1111:4; s_bit:1; 0b0000:4; rd:4; shifter_operand:12 ]
    }

    category [ _:4; 0b00010:5; _:2; 0b0:1; _:15; 0b0:1; _:4 ] // Misc instructions 1
      or [ _:4; 0b00010:5; _:2; 0b0:1; _:12; 0b0:1; _:2; 0b1:1; _:4 ] // Misc instructions 2
    {
        blx_2 = [ cond:4; 0b000100101111111111110011:24; rm:4 ]
        bx = [ cond:4; 0b000100101111111111110001:24; rm:4 ]
        clz = [ cond:4; 0b000101101111:12; rd:4; 0b1111:4; 0b0001:4; rm:4 ]
        mrs = [ cond:4; 0b00010:5; r_bit:1; 0b00:2; 0b1111:4; rd:4; 0b000000000000:12 ]
        msr_2 = [ cond:4; 0b00010:5; r_bit:1; 0b10:2; field_mask:4; 0b111100000000:12; rm:4 ]
        bkpt = [ 0b111000010010:12; immed_hi:11; 0b0111:4; immed_lo:4 ]
    }

    category [ _:4; 0b000:3; _:17; 0b1:1; _:2; 0b1:1; _:4 ] // Multiplies extra loads/stores
    {
        ldrd = [ cond:4; 0b000:3; p_bit:1; u_bit:1; i_bit:1; w_bit:1; 0b0:1; rn:4; rd:4; addr_mode_hi:4; 0b1101:4; addr_mode_lo:4 ]
        ldrex = [ cond:4; 0b00011001:8; rn:4; rd:4; 0b111110010000:12 ]
        ldrh = [ cond:4; 0b000:3; p_bit:1; u_bit:1; i_bit:1; w_bit:1; 0b1:1; rn:4; rd:4; addr_mode_hi:4; 0b1011:4; addr_mode_lo:4 ]
        ldrsb = [ cond:4; 0b000:3; p_bit:1; u_bit:1; i_bit:1; w_bit:1; 0b1:1; rn:4; rd:4; addr_mode_hi:4; 0b1101:4; addr_mode_lo:4 ]
        ldrsh = [ cond:4; 0b000:3; p_bit:1; u_bit:1; i_bit:1; w_bit:1; 0b1:1; rn:4; rd:4; addr_mode_hi:4; 0b1111:4; addr_mode_lo:4 ]
        mla = [ cond:4; 0b0000001:7; s_bit:1; rd:4; rn:4; rs:4; 0b1001:4; rm:4 ]
        mul = [ cond:4; 0b0000000:7; s_bit:1; rd:4; 0b0000:4; rs:4; 0b1001:4; rm:4 ]
        smlal = [ cond:4; 0b0000111:7; s_bit:1; rd_hi:4; rd_lo:4; rs:4; 0b1001:4; rm:4 ]
        smull = [ cond:4; 0b0000110:7; s_bit:1; rd_hi:4; rd_lo:4; rs:4; 0b1001:4; rm:4 ]
        strd = [ cond:4; 0b000:3; p_bit:1; u_bit:1; i_bit:1; w_bit:1; 0b0:1; rn:4; rd:4; addr_mode_hi:4; 0b1111:4; addr_mode_lo:4 ]
        strh = [ cond:4; 0b000:3; p_bit:1; u_bit:1; i_bit:1; w_bit:1; 0b0:1; rn:4; rd:4; addr_mode_hi:4; 0b1011:4; addr_mode_lo:4 ]
        swp = [ cond:4; 0b00010000:8; rn:4; rd:4; 0b0000:4; 0b1001:4; rm:4 ]
        swpb = [ cond:4; 0b00010100:8; rn:4; rd:4; 0b0000:4; 0b1001:4; rm:4 ]
        umlal = [ cond:4; 0b0000101:7; s_bit:1; rd_hi:4; rd_lo:4; rs:4; 0b1001:4; rm:4 ]
        umull = [ cond:4; 0b0000100:7; s_bit:1; rd_hi:4; rd_lo:4; rs:4; 0b1001:4; rm:4 ]
    }

    category [ _:4; 0b011:3; _:20; 0b1:1; _:4 ] // Media instructions
    {
        rev = [ cond:4; 0b011010111111:12; rd:4; 0b11110011:8; rn:4 ]
        uxtb = [ cond:4; 0b011011101111:12; rd:4; rot:2; 0b000111:6; rm:4 ]
        uxth = [ cond:4; 0b011011111111:12; rd:4; rot:2; 0b000111:6; rm:4 ]
    }

    category [ _:4; 0b010:3; _:25 ] // Load/store immediate offset
      or [ _:4; 0b011:3; _:20; 0b0:1; _:4 ] // Load/store register offset
    {
        ldr = [ cond:4; 0b01:2; i_bit:1; p_bit:1; u_bit:1; 0b0:1; w_bit:1; 0b1:1; rn:4; rd:4; addr_mode:12 ]
        ldrb = [ cond:4; 0b01:2; i_bit:1; p_bit:1; u_bit:1; 0b1:1; w_bit:1; 0b1:1; rn:4; rd:4; addr_mode:12 ]
        str = [ cond:4; 0b01:2; i_bit:1; p_bit:1; u_bit:1; 0b0:1; w_bit:1; 0b0:1; rn:4; rd:4; addr_mode:12 ]
        strb = [ cond:4; 0b01:2; i_bit:1; p_bit:1; u_bit:1; 0b1:1; w_bit:1; 0b0:1; rn:4; rd:4; addr_mode:12 ]
    }

    category [ _:4; 0b100:3; _:25 ] // Load/store multiple
    {
        ldm_1 = [ cond:4; 0b100:3; p_bit:1; u_bit:1; 0b0:1; w_bit:1; 0b1:1; rn:4; register_list:16 ]
        ldm_2 = [ cond:4; 0b100:3; p_bit:1; u_bit:1; 0b1:1; w_bit:1; 0b1:1; rn:4; 0b0:1; register_list:15 ]
        ldm_3 = [ cond:4; 0b100:3; p_bit:1; u_bit:1; 0b1:1; w_bit:1; 0b1:1; rn:4; 0b1:1; register_list:15 ]
        stm_1 = [ cond:4; 0b100:3; p_bit:1; u_bit:1; 0b0:1; w_bit:1; 0b0:1; rn:4; register_list:16 ]
        stm_2 = [ cond:4; 0b100:3; p_bit:1; u_bit:1; 0b100:3; rn:4; register_list:16 ]
    }

    category [ _:32 ] // Other
    {
        bbl = [ cond:4; 0b101:3; link_bit:1; signed_imm_24:24 ]
        mcr = [ cond:4; 0b1110:4; opcode_1:3; 0b0:1; crn:4; rd:4; cp_num:4; opcode_2:3; 0b1:1; crm:4 ]
        mrc = [ cond:4; 0b1110:4; opcode_1:3; 0b1:1; crn:4; rd:4; cp_num:4; opcode_2:3; 0b1:1; crm:4 ]
        msr_1 = [ cond:4; 0b00110:5; r_bit:1; 0b10:2; field_mask:4; 0b1111:4; shifter_operand:12 ]
        swi = [ cond:4; 0b1111:4; swi_index:24 ]
    }
}
